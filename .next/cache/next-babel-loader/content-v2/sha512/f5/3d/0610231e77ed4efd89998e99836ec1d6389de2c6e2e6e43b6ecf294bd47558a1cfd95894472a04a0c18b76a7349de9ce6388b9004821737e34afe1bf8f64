{"ast":null,"code":"import _regeneratorRuntime from \"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Container from \"../components/container\";\nimport Layout from \"../components/layout\";\nimport HomeImage from \"../components/home-image\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport data from \"../data\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\n\nvar bcrypt = require('bcryptjs');\n\nvar dup = false;\n\nfunction NewUser(_ref) {\n  var users = _ref.users;\n  var router = useRouter();\n\n  var _useState = useState(\"\"),\n      email = _useState[0],\n      setUserEmail = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      password = _useState2[0],\n      setUserPassword = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      cPassword = _useState3[0],\n      setUserCPassword = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      fName = _useState4[0],\n      setUserFName = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      lName = _useState5[0],\n      setUserLName = _useState5[1];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var passHash, match, i, body, req;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              passHash = bcrypt.hashSync(password, 8);\n              match = bcrypt.compareSync(cPassword, passHash);\n              i = 0;\n\n            case 4:\n              if (!(i < users.length)) {\n                _context.next = 11;\n                break;\n              }\n\n              if (!(users[i].email == email)) {\n                _context.next = 8;\n                break;\n              }\n\n              dup = true;\n              return _context.abrupt(\"break\", 11);\n\n            case 8:\n              i++;\n              _context.next = 4;\n              break;\n\n            case 11:\n              if (!dup) {\n                _context.next = 15;\n                break;\n              }\n\n              console.log(\"Account already exists\");\n              _context.next = 25;\n              break;\n\n            case 15:\n              if (match) {\n                _context.next = 19;\n                break;\n              }\n\n              console.log(\"Passwords do not match\");\n              _context.next = 25;\n              break;\n\n            case 19:\n              if (dup) {\n                _context.next = 25;\n                break;\n              }\n\n              body = JSON.stringify({\n                email: email,\n                passHash: passHash,\n                fName: fName,\n                lName: lName\n              });\n              req = new Request(\"/api/users/new\", {\n                method: \"POST\",\n                body: body\n              });\n              _context.next = 24;\n              return fetch(req);\n\n            case 24:\n              router.push(\"/login\");\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Evote Serverless\")), __jsx(Container, null, __jsx(HomeImage, null), __jsx(\"div\", {\n    className: \"index\"\n  }, __jsx(\"h1\", null, \"evote-serverless\", __jsx(\"span\", {\n    className: \"version-tag\"\n  }, \"v0.0.1\")), __jsx(\"div\", {\n    className: \"index-content\"\n  }, __jsx(\"form\", {\n    className: \"login-form\",\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"text\",\n    placeholder: \"First Name\",\n    value: fName,\n    onChange: function onChange(e) {\n      return setUserFName(e.target.value);\n    }\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"text\",\n    placeholder: \"Last Name\",\n    value: lName,\n    onChange: function onChange(e) {\n      return setUserLName(e.target.value);\n    }\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"text\",\n    placeholder: \"Email Address\",\n    value: email,\n    onChange: function onChange(e) {\n      return setUserEmail(e.target.value);\n    }\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: function onChange(e) {\n      return setUserPassword(e.target.value);\n    }\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"password\",\n    placeholder: \"Confirm Password\",\n    value: cPassword,\n    onChange: function onChange(e) {\n      return setUserCPassword(e.target.value);\n    }\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"end-login\"\n  }, __jsx(\"input\", {\n    type: \"submit\"\n  }), __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    className: \"instead\"\n  }, \"Log In Instead\"))))))));\n}\n/*NewUser.getInitialProps = async ({ req }) => {\n  if (req) {\n    // this is server side\n    return {\n      users: await data.readTable(\"Users\")\n    };\n  } else {\n    // we are client side\n    const response = await fetch(\"/api/users\");\n    return { users: await response.json() };\n  }\n};*/\n\n\nexport default NewUser;","map":null,"metadata":{},"sourceType":"module"}