{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst getDynamoDBClient = () => {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  const AWS = require(\"aws-sdk\"); // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n\n\n  const edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  const dynamoDbRegion = edgeRegion.startsWith(\"us\") ? \"us-west-2\" : \"eu-west-2\";\n  const options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n  const client = process.env.LOCAL_DYNAMO_DB_ENDPOINT ? new AWS.DynamoDB.DocumentClient(_objectSpread(_objectSpread({}, options), {}, {\n    endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n  })) : new AWS.DynamoDB.DocumentClient(options);\n  return client;\n}; //Read Full Table\n\n\nmodule.exports = {\n  readTable: async table => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: table\n    }).promise();\n    return Items;\n  },\n  //GET Row Functions\n  getuser: async userEmail => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Users\"\n    }).promise();\n    const user = Items.find(user => user.email == userEmail);\n    return user;\n  },\n  getvoter: async voterHash => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Voters\"\n    }).promise();\n    const voter = Items.find(voter => voter.voterHash == voterHash);\n    return voter;\n  },\n  getelection: async electionHash => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Elections\"\n    }).promise();\n    const election = Items.find(election => election.electionHash == electionHash);\n    return election;\n  },\n  getBallot: async ballotHash => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Ballots\"\n    }).promise();\n    const ballot = Items.find(ballot => ballot.ballotHash == ballotHash);\n    return ballot;\n  },\n  createuser: async (email, passHash, fname, lname) => {\n    await getDynamoDBClient().put({\n      TableName: \"Users\",\n      Item: {\n        email: email,\n        passHash: passHash,\n        fname: fname,\n        lname: lname,\n        joined: Date.now()\n      }\n    }).promise();\n  },\n  createvoter: async (electionId, email, voted) => {\n    await getDynamoDBClient().put({\n      TableName: \"Voters\",\n      Item: {\n        electionId: electionId,\n        email: email,\n        voted: voted,\n        invitedOn: Date.now()\n      }\n    }).promise();\n  },\n  createelection: async (title, ballotModel, voters, managers, deadline, voteEmail, votedEmail, emailSender, notVotedEmail, publicKey, privateKey, counters, closed) => {\n    await getDynamoDBClient().put({\n      TableName: \"Elections\",\n      Item: {\n        title: title,\n        ballotModel: ballotModel,\n        voters: voters,\n        managers: managers,\n        deadline: deadline,\n        voteEmail: voteEmail,\n        votedEmail: votedEmail,\n        emailSender: emailSender,\n        notVotedEmail: notVotedEmail,\n        publicKey: publicKey,\n        privateKey: privateKey,\n        counters: counters,\n        closed: closed\n      }\n    }).promise();\n  },\n  createballot: async (ballotContent, assigned, voted, votedOn, preferences, embeddedHash, signature) => {\n    await getDynamoDBClient().put({\n      TableName: \"Ballots\",\n      Item: {\n        ballotContent: ballotContent,\n        assigned: assigned,\n        voted: voted,\n        votedOn: Date.now(),\n        preferences: preferences,\n        embeddedHash: embeddedHash,\n        signature: signature\n      }\n    }).promise();\n  }\n};","map":{"version":3,"sources":["/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/data/dynamodb.js"],"names":["getDynamoDBClient","AWS","require","edgeRegion","process","env","AWS_REGION","dynamoDbRegion","startsWith","options","convertEmptyValues","region","client","LOCAL_DYNAMO_DB_ENDPOINT","DynamoDB","DocumentClient","endpoint","module","exports","readTable","table","Items","scan","TableName","promise","getuser","userEmail","user","find","email","getvoter","voterHash","voter","getelection","electionHash","election","getBallot","ballotHash","ballot","createuser","passHash","fname","lname","put","Item","joined","Date","now","createvoter","electionId","voted","invitedOn","createelection","title","ballotModel","voters","managers","deadline","voteEmail","votedEmail","emailSender","notVotedEmail","publicKey","privateKey","counters","closed","createballot","ballotContent","assigned","votedOn","preferences","embeddedHash","signature"],"mappings":";;;;;;AAAA,MAAMA,iBAAiB,GAAG,MAAM;AAC9B;AACA;AACA,QAAMC,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAnB,CAH8B,CAK9B;AACA;AACA;;;AACA,QAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0B,WAA7C;AACA,QAAMC,cAAc,GAAGJ,UAAU,CAACK,UAAX,CAAsB,IAAtB,IACnB,WADmB,GAEnB,WAFJ;AAIA,QAAMC,OAAO,GAAG;AACdC,IAAAA,kBAAkB,EAAE,IADN;AAEdC,IAAAA,MAAM,EAAEJ;AAFM,GAAhB;AAKA,QAAMK,MAAM,GAAGR,OAAO,CAACC,GAAR,CAAYQ,wBAAZ,GACX,IAAIZ,GAAG,CAACa,QAAJ,CAAaC,cAAjB,iCACKN,OADL;AAEEO,IAAAA,QAAQ,EAAEZ,OAAO,CAACC,GAAR,CAAYQ;AAFxB,KADW,GAKX,IAAIZ,GAAG,CAACa,QAAJ,CAAaC,cAAjB,CAAgCN,OAAhC,CALJ;AAOA,SAAOG,MAAP;AACD,CA1BD,C,CA4BA;;;AACAK,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,SAAS,EAAE,MAAOC,KAAP,IAAiB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAY,MAAMrB,iBAAiB,GACtCsB,IADqB,CAChB;AACJC,MAAAA,SAAS,EAAEH;AADP,KADgB,EAIrBI,OAJqB,EAAxB;AAMA,WAAOH,KAAP;AACD,GATc;AAYjB;AACEI,EAAAA,OAAO,EAAE,MAAOC,SAAP,IAAqB;AAC5B,UAAM;AAAEL,MAAAA;AAAF,QAAY,MAAMrB,iBAAiB,GACtCsB,IADqB,CAChB;AACJC,MAAAA,SAAS,EAAE;AADP,KADgB,EAIrBC,OAJqB,EAAxB;AAMA,UAAMG,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACE,KAAL,IAAcH,SAAnC,CAAb;AAEA,WAAOC,IAAP;AACD,GAvBc;AAwBfG,EAAAA,QAAQ,EAAE,MAAOC,SAAP,IAAqB;AAC7B,UAAM;AAAEV,MAAAA;AAAF,QAAY,MAAMrB,iBAAiB,GACtCsB,IADqB,CAChB;AACJC,MAAAA,SAAS,EAAE;AADP,KADgB,EAIrBC,OAJqB,EAAxB;AAMA,UAAMQ,KAAK,GAAGX,KAAK,CAACO,IAAN,CAAYI,KAAD,IAAWA,KAAK,CAACD,SAAN,IAAmBA,SAAzC,CAAd;AAEA,WAAOC,KAAP;AACD,GAlCc;AAmCfC,EAAAA,WAAW,EAAE,MAAOC,YAAP,IAAwB;AACnC,UAAM;AAAEb,MAAAA;AAAF,QAAY,MAAMrB,iBAAiB,GACtCsB,IADqB,CAChB;AACJC,MAAAA,SAAS,EAAE;AADP,KADgB,EAIrBC,OAJqB,EAAxB;AAMA,UAAMW,QAAQ,GAAGd,KAAK,CAACO,IAAN,CAAYO,QAAD,IAAcA,QAAQ,CAACD,YAAT,IAAyBA,YAAlD,CAAjB;AAEA,WAAOC,QAAP;AACD,GA7Cc;AA8CfC,EAAAA,SAAS,EAAE,MAAOC,UAAP,IAAsB;AAC/B,UAAM;AAAEhB,MAAAA;AAAF,QAAY,MAAMrB,iBAAiB,GACtCsB,IADqB,CAChB;AACJC,MAAAA,SAAS,EAAE;AADP,KADgB,EAIrBC,OAJqB,EAAxB;AAMA,UAAMc,MAAM,GAAGjB,KAAK,CAACO,IAAN,CAAYU,MAAD,IAAYA,MAAM,CAACD,UAAP,IAAqBA,UAA5C,CAAf;AAEA,WAAOC,MAAP;AACD,GAxDc;AAyDfC,EAAAA,UAAU,EAAE,OAAOV,KAAP,EAAcW,QAAd,EAAwBC,KAAxB,EAA+BC,KAA/B,KAAyC;AACnD,UAAM1C,iBAAiB,GACpB2C,GADG,CACC;AACHpB,MAAAA,SAAS,EAAE,OADR;AAEHqB,MAAAA,IAAI,EAAE;AACJf,QAAAA,KAAK,EAAEA,KADH;AAEJW,QAAAA,QAAQ,EAAEA,QAFN;AAGJC,QAAAA,KAAK,EAAEA,KAHH;AAIJC,QAAAA,KAAK,EAAEA,KAJH;AAKJG,QAAAA,MAAM,EAAEC,IAAI,CAACC,GAAL;AALJ;AAFH,KADD,EAWHvB,OAXG,EAAN;AAYD,GAtEc;AAuEfwB,EAAAA,WAAW,EAAE,OAAOC,UAAP,EAAmBpB,KAAnB,EAA0BqB,KAA1B,KAAoC;AAC/C,UAAMlD,iBAAiB,GACpB2C,GADG,CACC;AACHpB,MAAAA,SAAS,EAAE,QADR;AAEHqB,MAAAA,IAAI,EAAE;AACJK,QAAAA,UAAU,EAAEA,UADR;AAEJpB,QAAAA,KAAK,EAAEA,KAFH;AAGJqB,QAAAA,KAAK,EAAEA,KAHH;AAIJC,QAAAA,SAAS,EAAEL,IAAI,CAACC,GAAL;AAJP;AAFH,KADD,EAUHvB,OAVG,EAAN;AAWD,GAnFc;AAoFf4B,EAAAA,cAAc,EAAE,OAAOC,KAAP,EAAcC,WAAd,EAA2BC,MAA3B,EAAmCC,QAAnC,EAA6CC,QAA7C,EAAuDC,SAAvD,EAAkEC,UAAlE,EAA8EC,WAA9E,EAA2FC,aAA3F,EAA0GC,SAA1G,EAAqHC,UAArH,EAAiIC,QAAjI,EAA2IC,MAA3I,KAAsJ;AACpK,UAAMjE,iBAAiB,GACpB2C,GADG,CACC;AACHpB,MAAAA,SAAS,EAAE,WADR;AAEHqB,MAAAA,IAAI,EAAE;AACJS,QAAAA,KAAK,EAAEA,KADH;AAEJC,QAAAA,WAAW,EAAEA,WAFT;AAGJC,QAAAA,MAAM,EAAEA,MAHJ;AAIJC,QAAAA,QAAQ,EAAEA,QAJN;AAKJC,QAAAA,QAAQ,EAAEA,QALN;AAMJC,QAAAA,SAAS,EAAEA,SANP;AAOJC,QAAAA,UAAU,EAAEA,UAPR;AAQJC,QAAAA,WAAW,EAAEA,WART;AASJC,QAAAA,aAAa,EAAEA,aATX;AAUJC,QAAAA,SAAS,EAAEA,SAVP;AAWJC,QAAAA,UAAU,EAAEA,UAXR;AAYJC,QAAAA,QAAQ,EAAEA,QAZN;AAaJC,QAAAA,MAAM,EAAEA;AAbJ;AAFH,KADD,EAmBHzC,OAnBG,EAAN;AAoBD,GAzGc;AA0Gf0C,EAAAA,YAAY,EAAE,OAAOC,aAAP,EAAsBC,QAAtB,EAAgClB,KAAhC,EAAuCmB,OAAvC,EAAgDC,WAAhD,EAA6DC,YAA7D,EAA2EC,SAA3E,KAAyF;AACrG,UAAMxE,iBAAiB,GACpB2C,GADG,CACC;AACHpB,MAAAA,SAAS,EAAE,SADR;AAEHqB,MAAAA,IAAI,EAAE;AACJuB,QAAAA,aAAa,EAAEA,aADX;AAEJC,QAAAA,QAAQ,EAAEA,QAFN;AAGJlB,QAAAA,KAAK,EAAEA,KAHH;AAIJmB,QAAAA,OAAO,EAAEvB,IAAI,CAACC,GAAL,EAJL;AAKJuB,QAAAA,WAAW,EAAEA,WALT;AAMJC,QAAAA,YAAY,EAAEA,YANV;AAOJC,QAAAA,SAAS,EAAEA;AAPP;AAFH,KADD,EAaHhD,OAbG,EAAN;AAcD;AAzHc,CAAjB","sourcesContent":["const getDynamoDBClient = () => {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  const AWS = require(\"aws-sdk\");\n\n  // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n  const edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  const dynamoDbRegion = edgeRegion.startsWith(\"us\")\n    ? \"us-west-2\"\n    : \"eu-west-2\";\n\n  const options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n\n  const client = process.env.LOCAL_DYNAMO_DB_ENDPOINT\n    ? new AWS.DynamoDB.DocumentClient({\n        ...options,\n        endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n      })\n    : new AWS.DynamoDB.DocumentClient(options);\n\n  return client;\n};\n\n//Read Full Table\nmodule.exports = {\n  readTable: async (table) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: table\n      })\n      .promise();\n\n    return Items;\n  },\n\n\n//GET Row Functions\n  getuser: async (userEmail) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Users\"\n      })\n      .promise();\n\n    const user = Items.find((user) => user.email == userEmail);\n\n    return user;\n  },\n  getvoter: async (voterHash) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Voters\"\n      })\n      .promise();\n\n    const voter = Items.find((voter) => voter.voterHash == voterHash);\n\n    return voter;\n  },\n  getelection: async (electionHash) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Elections\"\n      })\n      .promise();\n\n    const election = Items.find((election) => election.electionHash == electionHash);\n\n    return election;\n  },\n  getBallot: async (ballotHash) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Ballots\"\n      })\n      .promise();\n\n    const ballot = Items.find((ballot) => ballot.ballotHash == ballotHash);\n\n    return ballot;\n  },\n  createuser: async (email, passHash, fname, lname) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Users\",\n        Item: {\n          email: email,\n          passHash: passHash,\n          fname: fname,\n          lname: lname,\n          joined: Date.now(),\n        }\n      })\n      .promise();\n  },\n  createvoter: async (electionId, email, voted) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Voters\",\n        Item: {\n          electionId: electionId,\n          email: email,\n          voted: voted,\n          invitedOn: Date.now(),\n        }\n      })\n      .promise();\n  },\n  createelection: async (title, ballotModel, voters, managers, deadline, voteEmail, votedEmail, emailSender, notVotedEmail, publicKey, privateKey, counters, closed) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Elections\",\n        Item: {\n          title: title,\n          ballotModel: ballotModel,\n          voters: voters,\n          managers: managers,\n          deadline: deadline,\n          voteEmail: voteEmail,\n          votedEmail: votedEmail,\n          emailSender: emailSender,\n          notVotedEmail: notVotedEmail,\n          publicKey: publicKey,\n          privateKey: privateKey,\n          counters: counters,\n          closed: closed,\n        }\n      })\n      .promise();\n  },\n  createballot: async (ballotContent, assigned, voted, votedOn, preferences, embeddedHash, signature) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Ballots\",\n        Item: {\n          ballotContent: ballotContent,\n          assigned: assigned,\n          voted: voted,\n          votedOn: Date.now(),\n          preferences: preferences,\n          embeddedHash: embeddedHash,\n          signature: signature,\n        }\n      })\n      .promise();\n  },\n};\n"]},"metadata":{},"sourceType":"script"}