{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar getDynamoDBClient = function getDynamoDBClient() {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  var AWS = require(\"aws-sdk\"); // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n\n\n  var edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  var dynamoDbRegion = edgeRegion.startsWith(\"us\") ? \"us-west-2\" : \"eu-west-2\";\n  var options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n  var client = process.env.LOCAL_DYNAMO_DB_ENDPOINT ? new AWS.DynamoDB.DocumentClient(_objectSpread(_objectSpread({}, options), {}, {\n    endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n  })) : new AWS.DynamoDB.DocumentClient(options);\n  return client;\n}; //Read Full Table\n\n\nmodule.exports = {\n  readTable: function () {\n    var _readTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(table) {\n      var _yield$getDynamoDBCli, Items;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: table\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli = _context.sent;\n              Items = _yield$getDynamoDBCli.Items;\n              return _context.abrupt(\"return\", Items);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function readTable(_x) {\n      return _readTable.apply(this, arguments);\n    }\n\n    return readTable;\n  }(),\n  //GET Row Functions\n\n  /*\n    getuser: async (userEmail) => {\n      const { Items } = await getDynamoDBClient()\n        .scan({\n          TableName: \"Users\"\n        })\n        .promise();\n  \n      const user = Items.find((user) => user.email == userEmail);\n  \n      return user;\n    },\n    getvoter: async (voterHash) => {\n      const { Items } = await getDynamoDBClient()\n        .scan({\n          TableName: \"Voters\"\n        })\n        .promise();\n  \n      const voter = Items.find((voter) => voter.voterHash == voterHash);\n  \n      return voter;\n    },\n    getelection: async (electionHash) => {\n      const { Items } = await getDynamoDBClient()\n        .scan({\n          TableName: \"Elections\"\n        })\n        .promise();\n  \n      const election = Items.find((election) => election.electionHash == electionHash);\n  \n      return election;\n    },\n    getBallot: async (ballotHash) => {\n      const { Items } = await getDynamoDBClient()\n        .scan({\n          TableName: \"Ballots\"\n        })\n        .promise();\n  \n      const ballot = Items.find((ballot) => ballot.ballotHash == ballotHash);\n  \n      return ballot;\n    },\n  */\n  createuser: function () {\n    var _createuser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email, passHash, fName, lName) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getDynamoDBClient().put({\n                TableName: \"Users\",\n                Item: {\n                  userHash: Date.now(),\n                  email: email,\n                  passHash: passHash,\n                  fName: fName,\n                  lName: lName //joined: Date.now(),\n\n                }\n              }).promise();\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function createuser(_x2, _x3, _x4, _x5) {\n      return _createuser.apply(this, arguments);\n    }\n\n    return createuser;\n  }()\n  /*\n    createvoter: async (electionId, email, voted) => {\n      await getDynamoDBClient()\n        .put({\n          TableName: \"Voters\",\n          Item: {\n            electionId: electionId,\n            email: email,\n            voted: voted,\n            invitedOn: Date.now(),\n          }\n        })\n        .promise();\n    },\n    createelection: async (title, ballotModel, voters, managers, deadline, voteEmail, votedEmail, emailSender, notVotedEmail, publicKey, privateKey, counters, closed) => {\n      await getDynamoDBClient()\n        .put({\n          TableName: \"Elections\",\n          Item: {\n            title: title,\n            ballotModel: ballotModel,\n            voters: voters,\n            managers: managers,\n            deadline: deadline,\n            voteEmail: voteEmail,\n            votedEmail: votedEmail,\n            emailSender: emailSender,\n            notVotedEmail: notVotedEmail,\n            publicKey: publicKey,\n            privateKey: privateKey,\n            counters: counters,\n            closed: closed,\n          }\n        })\n        .promise();\n    },\n    createballot: async (ballotContent, assigned, voted, votedOn, preferences, embeddedHash, signature) => {\n      await getDynamoDBClient()\n        .put({\n          TableName: \"Ballots\",\n          Item: {\n            ballotContent: ballotContent,\n            assigned: assigned,\n            voted: voted,\n            votedOn: Date.now(),\n            preferences: preferences,\n            embeddedHash: embeddedHash,\n            signature: signature,\n          }\n        })\n        .promise();\n    },\n  */\n\n};","map":null,"metadata":{},"sourceType":"script"}