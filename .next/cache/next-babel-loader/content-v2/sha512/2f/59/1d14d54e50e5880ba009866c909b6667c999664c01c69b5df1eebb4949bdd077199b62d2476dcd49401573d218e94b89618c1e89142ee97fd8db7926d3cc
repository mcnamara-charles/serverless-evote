{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nmodule.exports = {\n  setCreds: function () {\n    var _setCreds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(hash) {\n      var date, jwtBody, jwt, cookieString;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              date = new Date();\n              date.setTime(date + 365 * 86400000);\n              jwtBody = {\n                hash: hash\n              };\n              jwt = jsonwebtoken.sign(jwtBody, SMCData.secret, {\n                algorithm: SMCData.alg,\n                expiresIn: '1hr'\n              });\n              cookieString = \"token=\" + jwt + \";expires=\" + date.toUTCString() + \";secure;HttpOnly;\";\n              return _context.abrupt(\"return\", {\n                statusCode: 200,\n                payload: {\n                  jwt: jwt,\n                  cookie: cookieString\n                }\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function setCreds(_x) {\n      return _setCreds.apply(this, arguments);\n    }\n\n    return setCreds;\n  }()\n};","map":{"version":3,"sources":["/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/login/cookie.js"],"names":["module","exports","setCreds","hash","date","Date","setTime","jwtBody","jwt","jsonwebtoken","sign","SMCData","secret","algorithm","alg","expiresIn","cookieString","toUTCString","statusCode","payload","cookie"],"mappings":";;;;AAAAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,QAAQ;AAAA,6EAAE,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACJC,cAAAA,IADI,GACG,IAAIC,IAAJ,EADH;AAERD,cAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,GAAI,MAAM,QAA3B;AAEMG,cAAAA,OAJE,GAIQ;AACdJ,gBAAAA,IAAI,EAAEA;AADQ,eAJR;AAQJK,cAAAA,GARI,GAQEC,YAAY,CAACC,IAAb,CAAkBH,OAAlB,EAA2BI,OAAO,CAACC,MAAnC,EAA2C;AAAEC,gBAAAA,SAAS,EAAEF,OAAO,CAACG,GAArB;AAA0BC,gBAAAA,SAAS,EAAE;AAArC,eAA3C,CARF;AASFC,cAAAA,YATE,GASa,WAASR,GAAT,GAAa,WAAb,GAA2BJ,IAAI,CAACa,WAAL,EAA3B,GAAgD,mBAT7D;AAAA,+CAWH;AACLC,gBAAAA,UAAU,EAAE,GADP;AAELC,gBAAAA,OAAO,EAAE;AACPX,kBAAAA,GAAG,EAAEA,GADE;AAEPY,kBAAAA,MAAM,EAAEJ;AAFD;AAFJ,eAXG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AADO,CAAjB","sourcesContent":["module.exports = {\n  setCreds: async (hash) => {\n    var date = new Date();\n    date.setTime(date + (365 * 86400000));\n\n    const jwtBody = {\n      hash: hash,\n    }\n\n    var jwt = jsonwebtoken.sign(jwtBody, SMCData.secret, { algorithm: SMCData.alg, expiresIn: '1hr'});\n    const cookieString = \"token=\"+jwt+\";expires=\" + date.toUTCString() + \";secure;HttpOnly;\"\n\n  return {\n    statusCode: 200,\n    payload: {\n      jwt: jwt,\n      cookie: cookieString\n    }\n  }\n}\n};\n"]},"metadata":{},"sourceType":"script"}