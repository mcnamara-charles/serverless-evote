{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar TableName = process.env.TABLE_NAME;\n\nvar getDynamoDBClient = function getDynamoDBClient() {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  var AWS = require(\"aws-sdk\"); // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n\n\n  var edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  var dynamoDbRegion = edgeRegion.startsWith(\"us\") ? \"us-west-2\" : \"eu-west-2\";\n  var options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n  var client = process.env.LOCAL_DYNAMO_DB_ENDPOINT ? new AWS.DynamoDB.DocumentClient(_objectSpread(_objectSpread({}, options), {}, {\n    endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n  })) : new AWS.DynamoDB.DocumentClient(options);\n  return client;\n};\n\nmodule.exports = {\n  readTodos: function () {\n    var _readTodos = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$getDynamoDBCli, Items;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: TableName\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli = _context.sent;\n              Items = _yield$getDynamoDBCli.Items;\n              return _context.abrupt(\"return\", Items);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function readTodos() {\n      return _readTodos.apply(this, arguments);\n    }\n\n    return readTodos;\n  }(),\n  getTodo: function () {\n    var _getTodo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(todoId) {\n      var _yield$getDynamoDBCli2, Items, todo;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: TableName\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli2 = _context2.sent;\n              Items = _yield$getDynamoDBCli2.Items;\n              todo = Items.find(function (todo) {\n                return todo.todoId == todoId;\n              });\n              return _context2.abrupt(\"return\", todo);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getTodo(_x) {\n      return _getTodo.apply(this, arguments);\n    }\n\n    return getTodo;\n  }(),\n  createTodo: function () {\n    var _createTodo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(todoDescription) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getDynamoDBClient().put({\n                TableName: TableName,\n                Item: {\n                  todoId: Date.now(),\n                  todoDescription: todoDescription\n                }\n              }).promise();\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function createTodo(_x2) {\n      return _createTodo.apply(this, arguments);\n    }\n\n    return createTodo;\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}