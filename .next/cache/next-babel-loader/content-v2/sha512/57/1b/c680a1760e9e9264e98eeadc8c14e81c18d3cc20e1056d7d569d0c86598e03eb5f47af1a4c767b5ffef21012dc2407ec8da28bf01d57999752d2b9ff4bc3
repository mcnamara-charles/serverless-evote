{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst getDynamoDBClient = () => {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  const AWS = require(\"aws-sdk\"); // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n\n\n  const edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  const dynamoDbRegion = edgeRegion.startsWith(\"us\") ? \"us-west-2\" : \"eu-west-2\";\n  const options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n  const client = process.env.LOCAL_DYNAMO_DB_ENDPOINT ? new AWS.DynamoDB.DocumentClient(_objectSpread(_objectSpread({}, options), {}, {\n    endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n  })) : new AWS.DynamoDB.DocumentClient(options);\n  return client;\n}; //Read Full Table\n\n\nmodule.exports = {\n  readTable: async table => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: table\n    }).promise();\n    return Items;\n  },\n  //GET Row Functions\n  getuser: async userEmail => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Users\"\n    }).promise();\n    const user = Items.find(user => user.email == userEmail);\n    return user;\n  },\n  getvoter: async voterHash => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Voters\"\n    }).promise();\n    const voter = Items.find(voter => voter.voterHash == voterHash);\n    return voter;\n  },\n  getelection: async electionHash => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Elections\"\n    }).promise();\n    const election = Items.find(election => election.electionHash == electionHash);\n    return election;\n  },\n  getBallot: async ballotHash => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName: \"Ballots\"\n    }).promise();\n    const ballot = Items.find(ballot => ballot.ballotHash == ballotHash);\n    return ballot;\n  },\n  createuser: async (email, passHash, fname, lname) => {\n    await getDynamoDBClient().put({\n      TableName: \"Users\",\n      Item: {\n        email: email,\n        passHash: passHash,\n        fname: fname,\n        lname: lname,\n        joined: Date.now()\n      }\n    }).promise();\n  },\n  createvoter: async (electionId, email, voted) => {\n    await getDynamoDBClient().put({\n      TableName: \"Voters\",\n      Item: {\n        electionId: electionId,\n        email: email,\n        voted: voted,\n        invitedOn: Date.now()\n      }\n    }).promise();\n  },\n  createelection: async (title, ballotModel, voters, managers, deadline, voteEmail, votedEmail, emailSender, notVotedEmail, publicKey, privateKey, counters, closed) => {\n    await getDynamoDBClient().put({\n      TableName: \"Elections\",\n      Item: {\n        title: title,\n        ballotModel: ballotModel,\n        voters: voters,\n        managers: managers,\n        deadline: deadline,\n        voteEmail: voteEmail,\n        votedEmail: votedEmail,\n        emailSender: emailSender,\n        notVotedEmail: notVotedEmail,\n        publicKey: publicKey,\n        privateKey: privateKey,\n        counters: counters,\n        closed: closed\n      }\n    }).promise();\n  },\n  createballot: async (ballotContent, assigned, voted, votedOn, preferences, embeddedHash, signature) => {\n    await getDynamoDBClient().put({\n      TableName: \"Ballots\",\n      Item: {\n        ballotContent: ballotContent,\n        assigned: assigned,\n        voted: voted,\n        votedOn: Date.now(),\n        preferences: preferences,\n        embeddedHash: embeddedHash,\n        signature: signature\n      }\n    }).promise();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}