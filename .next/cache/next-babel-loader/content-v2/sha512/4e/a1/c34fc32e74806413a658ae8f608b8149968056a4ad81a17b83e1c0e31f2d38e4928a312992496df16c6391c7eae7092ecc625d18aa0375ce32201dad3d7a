{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst TableName = process.env.TABLE_NAME;\n\nconst getDynamoDBClient = () => {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  const AWS = require(\"aws-sdk\"); // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n\n\n  const edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  const dynamoDbRegion = edgeRegion.startsWith(\"us\") ? \"us-west-2\" : \"eu-west-2\";\n  const options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n  const client = process.env.LOCAL_DYNAMO_DB_ENDPOINT ? new AWS.DynamoDB.DocumentClient(_objectSpread(_objectSpread({}, options), {}, {\n    endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n  })) : new AWS.DynamoDB.DocumentClient(options);\n  return client;\n};\n\nmodule.exports = {\n  readTodos: async () => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName\n    }).promise();\n    return Items;\n  },\n  getTodo: async todoId => {\n    const {\n      Items\n    } = await getDynamoDBClient().scan({\n      TableName\n    }).promise();\n    const todo = Items.find(todo => todo.todoId == todoId);\n    return todo;\n  },\n  createTodo: async todoDescription => {\n    await getDynamoDBClient().put({\n      TableName,\n      Item: {\n        todoId: Date.now(),\n        todoDescription\n      }\n    }).promise();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}