{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Container from \"../components/container\";\nimport Layout from \"../components/layout\";\nimport HomeImage from \"../components/home-image\";\nimport Head from \"next/head\";\nimport Link from \"next/link\";\nimport data from \"../data\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\n\nconst bcrypt = require('bcryptjs');\n\nvar dup = false;\n\nfunction NewUser({\n  users\n}) {\n  const router = useRouter();\n  const {\n    0: email,\n    1: setUserEmail\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setUserPassword\n  } = useState(\"\");\n  const {\n    0: cPassword,\n    1: setUserCPassword\n  } = useState(\"\");\n  const {\n    0: fName,\n    1: setUserFName\n  } = useState(\"\");\n  const {\n    0: lName,\n    1: setUserLName\n  } = useState(\"\");\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const passHash = bcrypt.hashSync(password, 8);\n    var match = bcrypt.compareSync(cPassword, passHash);\n\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].email == email) {\n        dup = true;\n        break;\n      }\n    }\n\n    if (dup) {\n      console.log(\"Account already exists\");\n    } else if (!match) {\n      console.log(\"Passwords do not match\");\n    } else {\n      if (!dup) {\n        const body = JSON.stringify({\n          email,\n          passHash,\n          fName,\n          lName\n        });\n        const req = new Request(\"/api/users/new\", {\n          method: \"POST\",\n          body: body\n        });\n        await fetch(req);\n        router.push(\"/login\");\n      }\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(Head, null, __jsx(\"title\", null, \"Evote Serverless\")), __jsx(Container, null, __jsx(HomeImage, null), __jsx(\"div\", {\n    className: \"index\"\n  }, __jsx(\"h1\", null, \"evote-serverless\", __jsx(\"span\", {\n    className: \"version-tag\"\n  }, \"v0.0.1\")), __jsx(\"div\", {\n    className: \"index-content\"\n  }, __jsx(\"form\", {\n    className: \"login-form\",\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"text\",\n    placeholder: \"First Name\",\n    value: fName,\n    onChange: e => setUserFName(e.target.value)\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"text\",\n    placeholder: \"Last Name\",\n    value: lName,\n    onChange: e => setUserLName(e.target.value)\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"text\",\n    placeholder: \"Email Address\",\n    value: email,\n    onChange: e => setUserEmail(e.target.value)\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"password\",\n    placeholder: \"Password\",\n    value: password,\n    onChange: e => setUserPassword(e.target.value)\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"input-effect col-3\"\n  }, __jsx(\"input\", {\n    className: \"effect-20\",\n    type: \"password\",\n    placeholder: \"Confirm Password\",\n    value: cPassword,\n    onChange: e => setUserCPassword(e.target.value)\n  }), __jsx(\"span\", {\n    className: \"focus-border\"\n  }, __jsx(\"i\", null))), __jsx(\"div\", {\n    className: \"end-login\"\n  }, __jsx(\"input\", {\n    type: \"submit\"\n  }), __jsx(Link, {\n    href: \"/login\"\n  }, __jsx(\"a\", {\n    className: \"instead\"\n  }, \"Log In Instead\"))))))));\n}\n\nNewUser.getInitialProps = async ({\n  req\n}) => {\n  if (req) {\n    // this is server side\n    // is fine to use aws-sdk here\n    return {\n      users: await data.readTable(\"Users\")\n    };\n  } else {\n    // we are client side\n    // fetch via api\n    const response = await fetch(\"/api/users\");\n    return {\n      users: await response.json()\n    };\n  }\n};\n\nexport default NewUser;","map":null,"metadata":{},"sourceType":"module"}