{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/node_modules/@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar getDynamoDBClient = function getDynamoDBClient() {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  var AWS = require(\"aws-sdk\"); // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n\n\n  var edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  var dynamoDbRegion = edgeRegion.startsWith(\"us\") ? \"us-west-2\" : \"eu-west-2\";\n  var options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n  var client = process.env.LOCAL_DYNAMO_DB_ENDPOINT ? new AWS.DynamoDB.DocumentClient(_objectSpread(_objectSpread({}, options), {}, {\n    endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n  })) : new AWS.DynamoDB.DocumentClient(options);\n  return client;\n}; //Read Full Table\n\n\nmodule.exports = {\n  readTable: function () {\n    var _readTable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(table) {\n      var _yield$getDynamoDBCli, Items;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: table\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli = _context.sent;\n              Items = _yield$getDynamoDBCli.Items;\n              return _context.abrupt(\"return\", Items);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function readTable(_x) {\n      return _readTable.apply(this, arguments);\n    }\n\n    return readTable;\n  }(),\n  //GET Row Functions\n  getuser: function () {\n    var _getuser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userEmail) {\n      var _yield$getDynamoDBCli2, Items, user;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: \"Users\"\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli2 = _context2.sent;\n              Items = _yield$getDynamoDBCli2.Items;\n              user = Items.find(function (user) {\n                return user.email == userEmail;\n              });\n              return _context2.abrupt(\"return\", user);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getuser(_x2) {\n      return _getuser.apply(this, arguments);\n    }\n\n    return getuser;\n  }(),\n  getvoter: function () {\n    var _getvoter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(voterHash) {\n      var _yield$getDynamoDBCli3, Items, voter;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: \"Voters\"\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli3 = _context3.sent;\n              Items = _yield$getDynamoDBCli3.Items;\n              voter = Items.find(function (voter) {\n                return voter.voterHash == voterHash;\n              });\n              return _context3.abrupt(\"return\", voter);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function getvoter(_x3) {\n      return _getvoter.apply(this, arguments);\n    }\n\n    return getvoter;\n  }(),\n  getelection: function () {\n    var _getelection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(electionHash) {\n      var _yield$getDynamoDBCli4, Items, election;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: \"Elections\"\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli4 = _context4.sent;\n              Items = _yield$getDynamoDBCli4.Items;\n              election = Items.find(function (election) {\n                return election.electionHash == electionHash;\n              });\n              return _context4.abrupt(\"return\", election);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function getelection(_x4) {\n      return _getelection.apply(this, arguments);\n    }\n\n    return getelection;\n  }(),\n  getBallot: function () {\n    var _getBallot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ballotHash) {\n      var _yield$getDynamoDBCli5, Items, ballot;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return getDynamoDBClient().scan({\n                TableName: \"Ballots\"\n              }).promise();\n\n            case 2:\n              _yield$getDynamoDBCli5 = _context5.sent;\n              Items = _yield$getDynamoDBCli5.Items;\n              ballot = Items.find(function (ballot) {\n                return ballot.ballotHash == ballotHash;\n              });\n              return _context5.abrupt(\"return\", ballot);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function getBallot(_x5) {\n      return _getBallot.apply(this, arguments);\n    }\n\n    return getBallot;\n  }(),\n  createuser: function () {\n    var _createuser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(email, passHash, fName, lName) {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return getDynamoDBClient().put({\n                TableName: \"Users\",\n                Item: {\n                  email: email,\n                  passHash: passHash,\n                  fname: fName,\n                  lname: lName,\n                  joined: Date.now()\n                }\n              }).promise();\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function createuser(_x6, _x7, _x8, _x9) {\n      return _createuser.apply(this, arguments);\n    }\n\n    return createuser;\n  }(),\n  createvoter: function () {\n    var _createvoter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(electionId, email, voted) {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return getDynamoDBClient().put({\n                TableName: \"Voters\",\n                Item: {\n                  electionId: electionId,\n                  email: email,\n                  voted: voted,\n                  invitedOn: Date.now()\n                }\n              }).promise();\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    function createvoter(_x10, _x11, _x12) {\n      return _createvoter.apply(this, arguments);\n    }\n\n    return createvoter;\n  }(),\n  createelection: function () {\n    var _createelection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(title, ballotModel, voters, managers, deadline, voteEmail, votedEmail, emailSender, notVotedEmail, publicKey, privateKey, counters, closed) {\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return getDynamoDBClient().put({\n                TableName: \"Elections\",\n                Item: {\n                  title: title,\n                  ballotModel: ballotModel,\n                  voters: voters,\n                  managers: managers,\n                  deadline: deadline,\n                  voteEmail: voteEmail,\n                  votedEmail: votedEmail,\n                  emailSender: emailSender,\n                  notVotedEmail: notVotedEmail,\n                  publicKey: publicKey,\n                  privateKey: privateKey,\n                  counters: counters,\n                  closed: closed\n                }\n              }).promise();\n\n            case 2:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n\n    function createelection(_x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23, _x24, _x25) {\n      return _createelection.apply(this, arguments);\n    }\n\n    return createelection;\n  }(),\n  createballot: function () {\n    var _createballot = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(ballotContent, assigned, voted, votedOn, preferences, embeddedHash, signature) {\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return getDynamoDBClient().put({\n                TableName: \"Ballots\",\n                Item: {\n                  ballotContent: ballotContent,\n                  assigned: assigned,\n                  voted: voted,\n                  votedOn: Date.now(),\n                  preferences: preferences,\n                  embeddedHash: embeddedHash,\n                  signature: signature\n                }\n              }).promise();\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n\n    function createballot(_x26, _x27, _x28, _x29, _x30, _x31, _x32) {\n      return _createballot.apply(this, arguments);\n    }\n\n    return createballot;\n  }()\n};","map":{"version":3,"sources":["/home/charles/serverless-next.js/packages/serverless-components/nextjs-component/examples/evote/data/dynamodb.js"],"names":["getDynamoDBClient","AWS","require","edgeRegion","process","env","AWS_REGION","dynamoDbRegion","startsWith","options","convertEmptyValues","region","client","LOCAL_DYNAMO_DB_ENDPOINT","DynamoDB","DocumentClient","endpoint","module","exports","readTable","table","scan","TableName","promise","Items","getuser","userEmail","user","find","email","getvoter","voterHash","voter","getelection","electionHash","election","getBallot","ballotHash","ballot","createuser","passHash","fName","lName","put","Item","fname","lname","joined","Date","now","createvoter","electionId","voted","invitedOn","createelection","title","ballotModel","voters","managers","deadline","voteEmail","votedEmail","emailSender","notVotedEmail","publicKey","privateKey","counters","closed","createballot","ballotContent","assigned","votedOn","preferences","embeddedHash","signature"],"mappings":"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","sourcesContent":["const getDynamoDBClient = () => {\n  // important to require the sdk here rather than a top level import\n  // this is to prevent the app from requiring the aws-sdk client side.\n  const AWS = require(\"aws-sdk\");\n\n  // dynamodb is replicated across us-west-2 and eu-west-2\n  // use us-west-2 for us regions or eu-west-2 for eu regions\n  // you can tweak this to suit your needs\n  const edgeRegion = process.env.AWS_REGION || \"us-west-2\";\n  const dynamoDbRegion = edgeRegion.startsWith(\"us\")\n    ? \"us-west-2\"\n    : \"eu-west-2\";\n\n  const options = {\n    convertEmptyValues: true,\n    region: dynamoDbRegion\n  };\n\n  const client = process.env.LOCAL_DYNAMO_DB_ENDPOINT\n    ? new AWS.DynamoDB.DocumentClient({\n        ...options,\n        endpoint: process.env.LOCAL_DYNAMO_DB_ENDPOINT\n      })\n    : new AWS.DynamoDB.DocumentClient(options);\n\n  return client;\n};\n\n//Read Full Table\nmodule.exports = {\n  readTable: async (table) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: table\n      })\n      .promise();\n\n    return Items;\n  },\n\n\n//GET Row Functions\n  getuser: async (userEmail) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Users\"\n      })\n      .promise();\n\n    const user = Items.find((user) => user.email == userEmail);\n\n    return user;\n  },\n  getvoter: async (voterHash) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Voters\"\n      })\n      .promise();\n\n    const voter = Items.find((voter) => voter.voterHash == voterHash);\n\n    return voter;\n  },\n  getelection: async (electionHash) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Elections\"\n      })\n      .promise();\n\n    const election = Items.find((election) => election.electionHash == electionHash);\n\n    return election;\n  },\n  getBallot: async (ballotHash) => {\n    const { Items } = await getDynamoDBClient()\n      .scan({\n        TableName: \"Ballots\"\n      })\n      .promise();\n\n    const ballot = Items.find((ballot) => ballot.ballotHash == ballotHash);\n\n    return ballot;\n  },\n  createuser: async (email, passHash, fName, lName) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Users\",\n        Item: {\n          email: email,\n          passHash: passHash,\n          fname: fName,\n          lname: lName,\n          joined: Date.now(),\n        }\n      })\n      .promise();\n  },\n  createvoter: async (electionId, email, voted) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Voters\",\n        Item: {\n          electionId: electionId,\n          email: email,\n          voted: voted,\n          invitedOn: Date.now(),\n        }\n      })\n      .promise();\n  },\n  createelection: async (title, ballotModel, voters, managers, deadline, voteEmail, votedEmail, emailSender, notVotedEmail, publicKey, privateKey, counters, closed) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Elections\",\n        Item: {\n          title: title,\n          ballotModel: ballotModel,\n          voters: voters,\n          managers: managers,\n          deadline: deadline,\n          voteEmail: voteEmail,\n          votedEmail: votedEmail,\n          emailSender: emailSender,\n          notVotedEmail: notVotedEmail,\n          publicKey: publicKey,\n          privateKey: privateKey,\n          counters: counters,\n          closed: closed,\n        }\n      })\n      .promise();\n  },\n  createballot: async (ballotContent, assigned, voted, votedOn, preferences, embeddedHash, signature) => {\n    await getDynamoDBClient()\n      .put({\n        TableName: \"Ballots\",\n        Item: {\n          ballotContent: ballotContent,\n          assigned: assigned,\n          voted: voted,\n          votedOn: Date.now(),\n          preferences: preferences,\n          embeddedHash: embeddedHash,\n          signature: signature,\n        }\n      })\n      .promise();\n  },\n};\n"]},"metadata":{},"sourceType":"script"}